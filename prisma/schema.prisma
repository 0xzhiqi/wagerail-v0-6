generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum YieldSource {
  NONE        @map("none")
  RE7_LABS    @map("re7-labs")
  K3_CAPITAL  @map("k3-capital")
  MEV_CAPITAL @map("mev-capital")
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  walletAddress  String  @unique
  firstName      String?
  middleName     String?
  lastName       String?
  eercRegistered Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdWageGroups   WageGroup[]                @relation("WageGroupCreator")
  wageGroupOwnerships WageGroupWalletOwnership[]
  payees              Payee[]
  deposits            Deposit[]

  @@map("users")
}

model WageGroup {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  creatorId         String      @db.ObjectId
  name              String
  startDate         DateTime
  paymentDate       Int         // Day of month (1-28)
  yieldSource       YieldSource @default(NONE)
  safeWalletAddress String
  eercRegistered    Boolean     @default(false)
  isActive          Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator    User                       @relation("WageGroupCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  ownerships WageGroupWalletOwnership[]
  payees     Payee[]
  deposits   Deposit[]

  @@map("wage_groups")
}

model WageGroupWalletOwnership {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  userId           String  @db.ObjectId
  wageGroupId      String  @db.ObjectId
  isCurrentCoOwner Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wageGroup WageGroup @relation(fields: [wageGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, wageGroupId])
  @@map("wage_group_wallet_ownerships")
}

model Payee {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  wageGroupId   String  @db.ObjectId
  userId        String? @db.ObjectId
  email         String
  monthlyAmount String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  wageGroup WageGroup @relation(fields: [wageGroupId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("payees")
}

model Deposit {
  id                          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                      String      @db.ObjectId
  wageGroupId                 String      @db.ObjectId
  usdcDeposited               String
  sharesReceived              String?
  encryptedErcReceived        String
  encryptedErcTokenId         String
  yieldSourceDepositTxHash    String?
  encryptedErcConverterTxHash String
  yieldSource                 YieldSource

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wageGroup WageGroup @relation(fields: [wageGroupId], references: [id], onDelete: Cascade)

  @@map("deposits")
}